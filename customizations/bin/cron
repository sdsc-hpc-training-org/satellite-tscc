#!/usr/bin/perl
# cron
# run this via cron from an account that can write the httpd config stub

use strict;
use lib('../etc');
use satconfig;
use DBI;
use Digest::SHA qw(sha256_hex);
use File::Basename qw(dirname); 

my $basename = dirname(Cwd::abs_path($0));
chdir $basename;

# this will turn into a series of vhost entries
my $template = <<_VHOST_BODY_;
<VirtualHost *:_LISTENPORT_>
    SSLEngine on

    SSLCertificateFile /var/secrets/http-server.pem
    SSLCertificateKeyFile /var/secrets/http-server.privkey
    SSLCertificateChainFile /var/secrets/incommon-interm.pem

    ServerName _ALIAS_._EXTBASENAME_:_EXTPORT_
    RewriteEngine on
    RewriteCond %{HTTP:Upgrade} websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule .* "ws://_DSTHOST_:_DSTPORT_%{REQUEST_URI}" [P]

    ProxyPass "/" "http://_DSTHOST_:_DSTPORT_/"
    ProxyPassReverse "/" "http://_DSTHOST_:_DSTPORT_/"
</Virtualhost>
_VHOST_BODY_

my $dbfile = $satconfig::dbfile;
my $listenport = $satconfig::listenport;
my $extport = $satconfig::extport;
my $extbasename = $satconfig::extbasename;
my $httpdstubfile = $satconfig::httpdstubfile;

# get httpd's pid
# use killall instead since httpdpid might contain junk
#open(my $pidfileh, '<', $satconfig::pidfile) or die("Unable to read httpd pid file: $satconfig::pidfile: $!");
#my $httpdpid = do { local $/; <$pidfileh> };
#close($pidfileh);
#chomp $httpdpid;



# connect to the db since that's the remainder of what we do.
our $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", "", "", {
  AutoCommit => 0,
  RaiseError => 1,
});

# output is an array to be joined later.
my @output;

# newly mapped hosts should have state flipped to proxied
# so client js knows to trigger refresh.
my @map2proxy;

# clear out old junk
my $mincreate = time() - $satconfig::ttl_secs;
my $sth = $dbh->prepare("delete from proxy where modified < datetime(?,'unixepoch')");
$sth->execute($mincreate);
$sth = $dbh->prepare("select alias, dsthost, dstport, state from proxy where (state = 'mapped' or state = 'proxied') order by alias asc");
$sth->execute();
$dbh->commit;
while (my @row = $sth->fetchrow)
{
    my $alias = $row[0];
    my $dsthost = $row[1];
    my $dstport = $row[2];
    my $state = $row[3];

    # quietly skip entries with crap
    next unless ( $alias =~ /^[-a-zA-Z0-9]+$/ );
    next unless ( $dsthost =~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/ );
    next unless ( $dstport =~ /^[0-9]{4,5}$/ );
    next unless ( $dstport > 1023 && $dstport < 65536 );

    my $tmpblock = $template;
    $tmpblock =~ s/_LISTENPORT_/$listenport/g;
    $tmpblock =~ s/_EXTPORT_/$extport/g;
    $tmpblock =~ s/_EXTBASENAME_/$extbasename/g;
    $tmpblock =~ s/_ALIAS_/$alias/g;
    $tmpblock =~ s/_DSTHOST_/$dsthost/g;
    $tmpblock =~ s/_DSTPORT_/$dstport/g;
    unshift(@output, $tmpblock);

    unshift(@map2proxy, $alias) if ( $state eq 'mapped' );
}

my $newbody = join("\n", @output);
my $newbodyhash = sha256_hex($newbody);

# mark mapped entries as proxied
$sth = $dbh->prepare("update proxy set state = 'proxied' where alias = ?");
foreach my $a (@map2proxy)
{
    $sth->execute($a);
}
$dbh->commit;

# get the current body hash to see if any changes need to be made.
my $sha = Digest::SHA->new(256);
$sha->addfile($httpdstubfile);
my $currentbodyhash = $sha->hexdigest;

# update if different.
if ( lc($newbodyhash) ne lc($currentbodyhash) )
{
    open(my $ofh, ">", $httpdstubfile) or die("Can't write to $httpdstubfile: $!");
    print $ofh ($newbody);
    close($ofh);
    system("killall -USR1 httpd apache2 2>/dev/null");
}

